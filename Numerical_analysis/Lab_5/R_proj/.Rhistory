N <- 6
n <- 53
f <- function(t)
{
(10 + 0.5*N)/(1 + (20 + 0.25*N)*(1 + 0.05*(53-n)) * t^2)
}
f(3)
xi <- seq(from = -1, to = 1, by = 2/21)
xi
fi <- f(xi)
fi
seq(0,1,1/3)
xi <- seq(from = -1, to = 1, by = 2/20)
fi <- f(xi)
xi
fi
lagrange.poly <- function(x, y) {
l <- list() # List to store Lagrangian polynomials L_{1,2,3,4}
k <- 1
for (i in x) {
# Set the numerator and denominator of the Lagrangian polynomials to 1 and build them up
num <- 1
denom <- 1
# Remove the current x value from the iterated list
p <- x[! x %in% i]
# For the remaining points, construct the Lagrangian polynomial by successively
# appending each x value
for (j in p) {
num <- paste(num, "*", "(", 'x', " - ", as.character(j), ")", sep = "", collapse = "")
denom <- paste(denom, "*", "(", as.character(i)," - ", as.character(j), ")", sep = "", collapse = "")
}
# Set each Lagrangian polynomial in rSymPy to simplify later.
l[k] <- paste("(", num, ")", "/", "(", denom, ")", sep = "", collapse = "")
k <- k + 1
}
# Similar to before, we construct the final Lagrangian polynomial by successively building
# up the equation by iterating through the polynomials L_{1,2,3,4} and the y values
# corresponding to the x values.
eq <- 0
for (i in 1:length(y)) {
eq <- paste(eq, '+', as.character(y[i]), "*", l[[i]], sep = "", collapse = "")
}
# Define x variable for rSymPy to simplify
x <- Var('x')
# Simplify the result with rSymPy and return the polynomial
return(sympy(paste("simplify(", eq, ")")))
}
lagrange.poly(xi, fi)
install.packages("rSymPy")
###
library(rSymPy)
install.packages("rJava")
###
library(rSymPy)
lagrange.poly <- function(x, y) {
l <- list() # List to store Lagrangian polynomials L_{1,2,3,4}
k <- 1
for (i in x) {
# Set the numerator and denominator of the Lagrangian polynomials to 1 and build them up
num <- 1
denom <- 1
# Remove the current x value from the iterated list
p <- x[! x %in% i]
# For the remaining points, construct the Lagrangian polynomial by successively
# appending each x value
for (j in p) {
num <- paste(num, "*", "(", 'x', " - ", as.character(j), ")", sep = "", collapse = "")
denom <- paste(denom, "*", "(", as.character(i)," - ", as.character(j), ")", sep = "", collapse = "")
}
# Set each Lagrangian polynomial in rSymPy to simplify later.
l[k] <- paste("(", num, ")", "/", "(", denom, ")", sep = "", collapse = "")
k <- k + 1
}
# Similar to before, we construct the final Lagrangian polynomial by successively building
# up the equation by iterating through the polynomials L_{1,2,3,4} and the y values
# corresponding to the x values.
eq <- 0
for (i in 1:length(y)) {
eq <- paste(eq, '+', as.character(y[i]), "*", l[[i]], sep = "", collapse = "")
}
# Define x variable for rSymPy to simplify
x <- Var('x')
# Simplify the result with rSymPy and return the polynomial
return(sympy(paste("simplify(", eq, ")")))
}
lagrange.poly(xi, fi)
x <- seq(from = -1, to = 1, by = 2/20)
y <- f(xi)
dat <- data.frame(cbind(x, y))
lagrange.poly <- function(x, y) {
l <- list() # List to store Lagrangian polynomials L_{1,2,3,4}
k <- 1
for (i in x) {
# Set the numerator and denominator of the Lagrangian polynomials to 1 and build them up
num <- 1
denom <- 1
# Remove the current x value from the iterated list
p <- x[! x %in% i]
# For the remaining points, construct the Lagrangian polynomial by successively
# appending each x value
for (j in p) {
num <- paste(num, "*", "(", 'x', " - ", as.character(j), ")", sep = "", collapse = "")
denom <- paste(denom, "*", "(", as.character(i)," - ", as.character(j), ")", sep = "", collapse = "")
}
# Set each Lagrangian polynomial in rSymPy to simplify later.
l[k] <- paste("(", num, ")", "/", "(", denom, ")", sep = "", collapse = "")
k <- k + 1
}
# Similar to before, we construct the final Lagrangian polynomial by successively building
# up the equation by iterating through the polynomials L_{1,2,3,4} and the y values
# corresponding to the x values.
eq <- 0
for (i in 1:length(y)) {
eq <- paste(eq, '+', as.character(y[i]), "*", l[[i]], sep = "", collapse = "")
}
# Define x variable for rSymPy to simplify
x <- Var('x')
# Simplify the result with rSymPy and return the polynomial
return(sympy(paste("simplify(", eq, ")")))
}
lagrange.poly(xi, fi)
###
library(rSymPy)
f(1)
x
y
library(psychometric)
CIr(0.15,39,0.9)
CIr(0.15,39,0.1)
CIr(0.15,39,0.9)
CIr(0.71,0.85,28,39,0.99)
CIrdif(0.71,0.85,28,39,0.99)
qnorm(0.99)
qnorm(0.01)
atanh(0.71)-atanh(0.85)
qnorm(0.995)
(atanh(0.71)-atanh(0.85))/(sqrt(1/25 +1/36))
atanh(0.71)
tanh(0.216)
tanh(1.558)
CIrdif(-0.87,-0.65,124,147,0.9)
(atanh(-0.87)-atanh(-0.65))/(sqrt(1/121 +1/144))
qnorm(0.95)
atanh(-0.87)
atanh(-0.65)
atanh(1.147)
atanh(1.127)
atanh(-0.87)
atanh(-1.127)
tanh(1.127)
tanh(1.533)
tanh(-1.533)
#1##############
library(MASS)
alpha <- 0.05
n <- 140
mu <- c(1,-3)
Sigma <- matrix(c(1,-1,-1,2), byrow = T, ncol = 2)
df <- mvrnorm(n,mu,Sigma, empirical = T)
num_bins <- length(hist(df[,2], breaks = "Sturges", freq = T)$breaks)
x_c <- cut(df[,1], num_bins)
y_c <- cut(df[,2], num_bins)
z <- table(x_c, y_c)
library(plot3D)
length(z)
floor(min(df[,1])):ceiling(max(df[,1]))
nrow(x_c)
main_perspective1 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 40, lphi = 50)
main_perspective2 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 80, lphi = 50)
main_perspective3 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 120, lphi = 50)
main_perspective4 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 160, lphi = 50)
hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 0, theta = 0, lphi = 50)
hist3D(x = seq(from = min(df[,1]), max(df[,1]), length.out = nrow(z)),
y = seq(from = min(df[,2]), max(df[,2]), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 0, theta = 180, lphi = 50, d = 20)
plot(df)
#2#############
meanx <- mean(df[,1])
meany <- mean(df[,2])
beta2 <- (sum((df[,2] - meany)*(df[,1] - meanx)))/(sum((df[,1] - meanx)^2))
beta1 <- meany - beta2 * meanx
p <- 1
sigma_ost <- (sum(df[,2] - beta2 * df[,1] - beta1))/(n-p-1)
lm1 <- lm(df[,2] ~ df[,1])
summary(lm1)
plot(df)
abline(lm1)
#3#############
#Sigma[1,2] / (sqrt(Sigma[1,1] * Sigma[2,2]))
r <- cor(df)[1,2]
rnorm(1,mean = 0, sqrt(Sigma[2,2]*(1-r^2)))
library(psychometric)
CIr(r, n, 0.95)
confint(lm1, 1, level = 1-alpha)
main_perspective1
main_perspective1 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 40, lphi = 50)
plot(df)
abline(lm1)
confint(lm1, 1, level = 1-alpha)
eps_k <- rnorm(n,mean = 0, sqrt(Sigma[2,2]*(1-r^2)))
eps_k
var(eps_k)
confint(lm1)
main_perspective1 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 40, lphi = 50)
main_perspective2 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 80, lphi = 50)
main_perspective3 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 120, lphi = 50)
main_perspective4 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 160, lphi = 50)
#3#############
#Sigma[1,2] / (sqrt(Sigma[1,1] * Sigma[2,2]))
r <- cor(df)[1,2]
cor(df)
CIr(r, n, 0.95)
n <- 14000
mu <- c(1,-3)
Sigma <- matrix(c(1,-1,-1,2), byrow = T, ncol = 2)
df <- mvrnorm(n,mu,Sigma, empirical = T)
num_bins <- length(hist(df[,2], breaks = "Sturges", freq = T)$breaks)
x_c <- cut(df[,1], num_bins)
y_c <- cut(df[,2], num_bins)
z <- table(x_c, y_c)
main_perspective1 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 40, lphi = 50)
main_perspective2 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 80, lphi = 50)
main_perspective3 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 120, lphi = 50)
main_perspective4 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 160, lphi = 50)
n <- 140
mu <- c(1,-3)
Sigma <- matrix(c(1,-1,-1,2), byrow = T, ncol = 2)
df <- mvrnorm(n,mu,Sigma, empirical = T)
num_bins <- length(hist(df[,2], breaks = "Sturges", freq = T)$breaks)
x_c <- cut(df[,1], num_bins)
y_c <- cut(df[,2], num_bins)
z <- table(x_c, y_c)
floor(min(df[,1])):ceiling(max(df[,1]))
nrow(x_c)
main_perspective1 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 40, lphi = 50)
main_perspective2 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 80, lphi = 50)
main_perspective3 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 120, lphi = 50)
main_perspective4 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 160, lphi = 50)
df
#2#############
meanx <- mean(df[,1])
meany <- mean(df[,2])
meanx
meany
df <- mvrnorm(n,mu,Sigma, empirical = F)
meanx
alpha <- 0.05
n <- 140
mu <- c(1,-3)
Sigma <- matrix(c(1,-1,-1,2), byrow = T, ncol = 2)
df <- mvrnorm(n,mu,Sigma, empirical = F)
num_bins <- length(hist(df[,2], breaks = "Sturges", freq = T)$breaks)
x_c <- cut(df[,1], num_bins)
y_c <- cut(df[,2], num_bins)
z <- table(x_c, y_c)
#2#############
meanx <- mean(df[,1])
meany <- mean(df[,2])
meanx
meany
Sigma
plot(df)
abline(lm1)
x <- rnorm(n, mu[1], sqrt(Sigma[1,1]))
x
mean(x)
x <- rnorm(n, mu[1], sqrt(Sigma[1,1]))
mean(x)
x <- rnorm(n, mu[1], sqrt(Sigma[1,1]))
mean(x)
r <- Sigma[1,2] / sqrt(Sigma[1,1] * Sigma[2,2])
r
eps <- rnorm(n,mean = 0, sqrt(Sigma[2,2]*(1-r^2)))
eps
y <- mu[2] + (Sigma[1,2] / Sigma[1,1]) * (x-mu[1]) + eps
y
mean(y)
cov(x,y)
x <- rnorm(n, mu[1], sqrt(Sigma[1,1]))
eps <- rnorm(n,mean = 0, sqrt(Sigma[2,2]*(1-r^2)))
y <- mu[2] + (Sigma[1,2] / Sigma[1,1]) * (x-mu[1]) + eps
cov(x,y)
x <- rnorm(n, mu[1], sqrt(Sigma[1,1]))
eps <- rnorm(n,mean = 0, sqrt(Sigma[2,2]*(1-r^2)))
y <- mu[2] + (Sigma[1,2] / Sigma[1,1]) * (x-mu[1]) + eps
cov(x,y)
x <- rnorm(n, mu[1], sqrt(Sigma[1,1]))
eps <- rnorm(n,mean = 0, sqrt(Sigma[2,2]*(1-r^2)))
y <- mu[2] + (Sigma[1,2] / Sigma[1,1]) * (x-mu[1]) + eps
mean(y)
cov(x,y)
df <- mvrnorm(n,mu,Sigma, empirical = F)
df <- mvrnorm(n,mu,Sigma, empirical = T)
cov(df)
df <- mvrnorm(n,mu,Sigma, empirical = F)
cov(df)
typeof(df)
df
#df <- mvrnorm(n,mu,Sigma, empirical = F)
df <- matrix(x,y)
#df <- mvrnorm(n,mu,Sigma, empirical = F)
df <- matrix(c(x,y), ncol=2)
df
cov(df)
num_bins <- length(hist(df[,2], breaks = "Sturges", freq = T)$breaks)
x_c <- cut(df[,1], num_bins)
y_c <- cut(df[,2], num_bins)
z <- table(x_c, y_c)
length(z)
floor(min(df[,1])):ceiling(max(df[,1]))
nrow(x_c)
main_perspective1 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 40, lphi = 50)
main_perspective2 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 80, lphi = 50)
main_perspective3 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 120, lphi = 50)
main_perspective4 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 160, lphi = 50)
hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 0, theta = 0, lphi = 50)
main_perspective3 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 120, lphi = 50)
#2#############
meanx <- mean(df[,1])
meany <- mean(df[,2])
meanx
meany
alpha <- 0.05
n <- 140
mu <- c(2,-2)
Sigma <- matrix(c(4,-2,-2,2), byrow = T, ncol = 2)
r <- Sigma[1,2] / sqrt(Sigma[1,1] * Sigma[2,2])
x <- rnorm(n, mu[1], sqrt(Sigma[1,1]))
eps <- rnorm(n,mean = 0, sqrt(Sigma[2,2]*(1-r^2)))
y <- mu[2] + (Sigma[1,2] / Sigma[1,1]) * (x-mu[1]) + eps
mean(y)
cov(x,y)
#df <- mvrnorm(n,mu,Sigma, empirical = F)
df <- matrix(c(x,y), ncol=2)
df
num_bins <- length(hist(df[,2], breaks = "Sturges", freq = T)$breaks)
x_c <- cut(df[,1], num_bins)
y_c <- cut(df[,2], num_bins)
z <- table(x_c, y_c)
library(plot3D)
length(z)
floor(min(df[,1])):ceiling(max(df[,1]))
nrow(x_c)
main_perspective1 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 40, lphi = 50)
main_perspective2 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 80, lphi = 50)
main_perspective3 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 120, lphi = 50)
main_perspective4 <- hist3D(x = seq(from = floor(min(df[,1])), ceiling(max(df[,1])), length.out = nrow(z)),
y = seq(from = floor(min(df[,2])), ceiling(max(df[,2])), length.out = nrow(z)),
z=z, border="black", ticktype = "detailed", lighting=T,
bty = "g", phi = 30, theta = 160, lphi = 50)
