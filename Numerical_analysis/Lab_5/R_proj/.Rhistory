N <- 6
n <- 53
f <- function(t)
{
(10 + 0.5*N)/(1 + (20 + 0.25*N)*(1 + 0.05*(53-n)) * t^2)
}
f(3)
xi <- seq(from = -1, to = 1, by = 2/21)
xi
fi <- f(xi)
fi
seq(0,1,1/3)
xi <- seq(from = -1, to = 1, by = 2/20)
fi <- f(xi)
xi
fi
lagrange.poly <- function(x, y) {
l <- list() # List to store Lagrangian polynomials L_{1,2,3,4}
k <- 1
for (i in x) {
# Set the numerator and denominator of the Lagrangian polynomials to 1 and build them up
num <- 1
denom <- 1
# Remove the current x value from the iterated list
p <- x[! x %in% i]
# For the remaining points, construct the Lagrangian polynomial by successively
# appending each x value
for (j in p) {
num <- paste(num, "*", "(", 'x', " - ", as.character(j), ")", sep = "", collapse = "")
denom <- paste(denom, "*", "(", as.character(i)," - ", as.character(j), ")", sep = "", collapse = "")
}
# Set each Lagrangian polynomial in rSymPy to simplify later.
l[k] <- paste("(", num, ")", "/", "(", denom, ")", sep = "", collapse = "")
k <- k + 1
}
# Similar to before, we construct the final Lagrangian polynomial by successively building
# up the equation by iterating through the polynomials L_{1,2,3,4} and the y values
# corresponding to the x values.
eq <- 0
for (i in 1:length(y)) {
eq <- paste(eq, '+', as.character(y[i]), "*", l[[i]], sep = "", collapse = "")
}
# Define x variable for rSymPy to simplify
x <- Var('x')
# Simplify the result with rSymPy and return the polynomial
return(sympy(paste("simplify(", eq, ")")))
}
lagrange.poly(xi, fi)
install.packages("rSymPy")
###
library(rSymPy)
install.packages("rJava")
###
library(rSymPy)
lagrange.poly <- function(x, y) {
l <- list() # List to store Lagrangian polynomials L_{1,2,3,4}
k <- 1
for (i in x) {
# Set the numerator and denominator of the Lagrangian polynomials to 1 and build them up
num <- 1
denom <- 1
# Remove the current x value from the iterated list
p <- x[! x %in% i]
# For the remaining points, construct the Lagrangian polynomial by successively
# appending each x value
for (j in p) {
num <- paste(num, "*", "(", 'x', " - ", as.character(j), ")", sep = "", collapse = "")
denom <- paste(denom, "*", "(", as.character(i)," - ", as.character(j), ")", sep = "", collapse = "")
}
# Set each Lagrangian polynomial in rSymPy to simplify later.
l[k] <- paste("(", num, ")", "/", "(", denom, ")", sep = "", collapse = "")
k <- k + 1
}
# Similar to before, we construct the final Lagrangian polynomial by successively building
# up the equation by iterating through the polynomials L_{1,2,3,4} and the y values
# corresponding to the x values.
eq <- 0
for (i in 1:length(y)) {
eq <- paste(eq, '+', as.character(y[i]), "*", l[[i]], sep = "", collapse = "")
}
# Define x variable for rSymPy to simplify
x <- Var('x')
# Simplify the result with rSymPy and return the polynomial
return(sympy(paste("simplify(", eq, ")")))
}
lagrange.poly(xi, fi)
x <- seq(from = -1, to = 1, by = 2/20)
y <- f(xi)
dat <- data.frame(cbind(x, y))
lagrange.poly <- function(x, y) {
l <- list() # List to store Lagrangian polynomials L_{1,2,3,4}
k <- 1
for (i in x) {
# Set the numerator and denominator of the Lagrangian polynomials to 1 and build them up
num <- 1
denom <- 1
# Remove the current x value from the iterated list
p <- x[! x %in% i]
# For the remaining points, construct the Lagrangian polynomial by successively
# appending each x value
for (j in p) {
num <- paste(num, "*", "(", 'x', " - ", as.character(j), ")", sep = "", collapse = "")
denom <- paste(denom, "*", "(", as.character(i)," - ", as.character(j), ")", sep = "", collapse = "")
}
# Set each Lagrangian polynomial in rSymPy to simplify later.
l[k] <- paste("(", num, ")", "/", "(", denom, ")", sep = "", collapse = "")
k <- k + 1
}
# Similar to before, we construct the final Lagrangian polynomial by successively building
# up the equation by iterating through the polynomials L_{1,2,3,4} and the y values
# corresponding to the x values.
eq <- 0
for (i in 1:length(y)) {
eq <- paste(eq, '+', as.character(y[i]), "*", l[[i]], sep = "", collapse = "")
}
# Define x variable for rSymPy to simplify
x <- Var('x')
# Simplify the result with rSymPy and return the polynomial
return(sympy(paste("simplify(", eq, ")")))
}
lagrange.poly(xi, fi)
###
library(rSymPy)
f(1)
x
y
