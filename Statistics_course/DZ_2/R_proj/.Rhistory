q
for (i in 1:k)
{
q[i] <- q[i-1] + p[i]
}
for (i in 2:k)
{
q[i] <- q[i-1] + p[i]
}
q
rm(q)
q <- rep(NA,9)
q[1] <- p[1]
for (i in 2:k+1)
{
q[i] <- q[i-1] + p[i]
}
q
rm(q)
q <- rep(NA,9)
q[1] <- p[1]
for (i in 2:(k+1))
{
q[i] <- q[i-1] + p[i]
}
q
sum(q)
k <- 10
p1 <- 0.75
n <- 160
p <- rep(NA, k+1)
q <- rep(NA,k+1)
#p <- rbinom(9, size = 140, prob = 0.7)
for (i in 0:k)
{
p[i] <- dbinom(i, size = 140, 0.7)
}
p
k <- 10
p1 <- 0.75
n <- 160
p <- rep(NA, k+1)
q <- rep(NA,k+1)
#p <- rbinom(9, size = 140, prob = 0.7)
for (i in 0:(k+1))
{
p[i] <- dbinom(i, size = 140, 0.7)
}
p
p
k <- 10
p1 <- 0.75
n <- 160
p <- rep(NA, k+1)
q <- rep(NA,k+1)
#p <- rbinom(9, size = 140, prob = 0.7)
for (i in 0:(k+1))
{
p[i] <- dbinom(i, size = n, p1)
}
p
for (i in 0:(k+1))
{
p[i] <- dbinom(i, size = n, 1-p1)
}
p
p
dbinom(i, size = n, 1-p1)
for (i in 0:k)
{
p[i] <- choose(k, i)
}
p
sum(p, scientific = FALSE)
p
print(p, scientific = FALSE)
format(p, scientific = FALSE)
choose(10,10)
choose(11,10)
choose(10,11)
0:k
choose(10,10)
for (i in 0:k)
{
i
k
p[i] <- choose(k, i)
}
for (i in 0:k)
{
print(i)
print(k)
p[i] <- choose(k, i)
}
for (i in 0:k)
{
print(i)
print(k)
print(choose(k,i))
p[i] <- choose(k, i)
}
rm(p)
p <- rep(NA, k+1)
for (i in 0:k)
{
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
p
for (i in 0:k)
{
print(choose(k, i))
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
for (i in 0:k)
{
print(p1^(i))
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
for (i in 0:k)
{
print(p(1-p1)^(k-i))
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
for (i in 0:k)
{
print((1-p1)^(k-i))
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
for (i in 0:k)
{
print(p1^(i))
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
for (i in 0:k)
{
print(choose(k, i))
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
for (i in 0:k)
{
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
p
p <- rep(NA, k)
for (i in 0:k)
{
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
p
k <- 8
p1 <- 0.7
n <- 140
p <- rep(NA, k)
q <- rep(NA,k)
#p <- rbinom(9, size = 140, prob = 0.7)
for (i in 0:k)
{
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
p
k <- 8
p1 <- 0.7
n <- 140
p <- rep(NA, k+1)
for (i in 0:k)
{
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
p
k <- 8
p1 <- 0.7
n <- 140
p <- rep(NA, k+1)
for (i in 0:(k+1))
{
p[i] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
p
p[0]
k <- 8
p1 <- 0.7
n <- 140
p <- rep(NA, k+1)
for (i in 0:k)
{
p[i+1] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
p
q <- rep(NA, k+1)
for (i in 0:k)
{
q[i+1] <- dbinom(i,140,0.7)
}
q
rm(q)
q <- rep(NA, k+1)
q[1] <- p[1]
for (i in 2:k)
{
q[i] <- q[i-1] + p[i]
}
q
for (i in 2:(k+1))
{
q[i] <- q[i-1] + p[i]
}
q
sum(q)
y <- runif(n, 0, 1)
p_p <- rep(0,k+1)
ifelse(y < q[1], p_p[1] += 1)
ifelse(y < q[1], p_p[1] = p_p[1] + 1)
for (i in 0:(k+1))
{
p_p[i] <- sum(ifelse(p[i] < q[i], 1, 0))
}
p_p
for (i in 1:k)
{
p_p[i] <- sum(ifelse(p[i] < q[i], 1, 0))
}
p_p
for (i in 1:k)
{
p_p[i] <- sum(ifelse(p < q[i], 1, 0))
}
p_p
for (i in 2:(k+1))
{
p_p[i-1] <- sum(ifelse(p < q[i] || p >= q[i-1], 1, 0))
}
p_p
ifelse(p < q[i] || p >= q[i-1], 1, 0)
sum(1:10)
cumsum(1:10)
q <- cumsum(p)
q
cummax(q)
for (i in 2:(k+1))
{
p_p[i-1] <- cumsum(ifelse(p < q[i] || p >= q[i-1], 1, 0))
}
p_p
p<q[2]
y < q[i]
q[1]
y
y[1]
q[1]
y[1] < q[1]
y<q
y<q[1]
for (i in 2:(k+1))
{
p_p[i-1] <- sum(ifelse(y < q[i] || y >= q[i-1], 1, 0))
}
p_p
ifelse(y < q[1] || y >= q[1-1], 1, 0)
ifelse(y < q[2] || y >= q[2-1], 1, 0)
y < q[2]
y < q[2] || y >= q[2-1]
y < q[3] || y >= q[3-1]
y < q[3] && y >= q[3-1]
y < q[3] & y >= q[3-1]
for (i in 2:(k+1))
{
p_p[i-1] <- sum(ifelse(y < q[i] & y >= q[i-1], 1, 0))
}
p_p
sum(p_p)
q[9]
q[9-1]
ifelse(y < q[9] & y >= q[9-1], 1, 0)
p <- rep(NA, k+1)
q <- rep(NA, k+1)
for (i in 0:k)
{
p[i+1] <- choose(k, i)*p1^(i)*(1-p1)^(k-i)
}
q <- cumsum(p)
p_p <- rep(0,k+1)
for (i in 2:(k+1))
{
p_p[i-1] <- sum(ifelse(y < q[i] & y >= q[i-1], 1, 0))
}
p_p
sum(p_p)
hist(p_p)
hist(y)
for (i in 2:(k+1))
{
q_q[i-1] <- ifelse(y < q[i] & y >= q[i-1], i, 0)
}
q_q
q_q <- rep(0,k+1)
for (i in 2:(k+1))
{
q_q[i-1] <- ifelse(y < q[i] & y >= q[i-1], i, 0)
}
q_q
q_q <- rep(NA,k+1)
for (i in 2:(k+1))
{
q_q[i-1] <- ifelse(y < q[i] & y >= q[i-1], i, 0)
}
q_q <- rep(NA,k+1)
for (i in 2:(k+1))
{
q_q[i-1] <- ifelse(y < q[i] & y >= q[i-1], as.numeric(i), 0)
}
q_q <- rep(NA,k+1)
for (i in 2:(k+1))
{
q_q <- ifelse(y < q[i] & y >= q[i-1], as.numeric(i), 0)
}
q_q
q_q <- ifelse(y < q[2] & y >= q[2-1], 1, 0)
q_q
q_q <- ifelse(y < q[3] & y >= q[3-1], 2, 0)
q_q
q_q <- ifelse(y < q[4] & y >= q[4-1], 3, 0)
q_q
q_q <- ifelse(y < q[3] & y >= q[3-1], 2, ifelse(y < q[4] & y >= q[4-1], 3, 0))
q_q
q_q <- ifelse(y < q[1], 0,
ifelse(y < q[2] & y >= q[2-1], 1,
ifelse(y < q[3] & y >= q[3-1], 2,
ifelse(y < q[4] & y >= q[4-1], 3,
ifelse(y < q[5] & y >= q[5-1], 4,
ifelse(y < q[6] & y >= q[6-1], 5,
ifelse(y < q[7] & y >= q[7-1], 6,
ifelse(y < q[8] & y >= q[8-1], 7,
ifelse(y < q[9] & y >= q[9-1], 8,
))))))))))
q_q <- ifelse(y < q[1], 0,
ifelse(y < q[2] & y >= q[2-1], 1,
ifelse(y < q[3] & y >= q[3-1], 2,
ifelse(y < q[4] & y >= q[4-1], 3,
ifelse(y < q[5] & y >= q[5-1], 4,
ifelse(y < q[6] & y >= q[6-1], 5,
ifelse(y < q[7] & y >= q[7-1], 6,
ifelse(y < q[8] & y >= q[8-1], 7,
ifelse(y < q[9] & y >= q[9-1], 8))))))))))
q_q <- ifelse(y < q[1], 0,
ifelse(y < q[2] & y >= q[2-1], 1,
ifelse(y < q[3] & y >= q[3-1], 2,
ifelse(y < q[4] & y >= q[4-1], 3,
ifelse(y < q[5] & y >= q[5-1], 4,
ifelse(y < q[6] & y >= q[6-1], 5,
ifelse(y < q[7] & y >= q[7-1], 6,
ifelse(y < q[8] & y >= q[8-1], 7,
ifelse(y < q[9] & y >= q[9-1], 8)))))))))
q_q <- ifelse(y < q[1], 0,
ifelse(y < q[2] & y >= q[2-1], 1,
ifelse(y < q[3] & y >= q[3-1], 2,
ifelse(y < q[4] & y >= q[4-1], 3,
ifelse(y < q[5] & y >= q[5-1], 4,
ifelse(y < q[6] & y >= q[6-1], 5,
ifelse(y < q[7] & y >= q[7-1], 6,
ifelse(y < q[8] & y >= q[8-1], 7,
ifelse(y < q[9] & y >= q[9-1], 8,0)))))))))
q_q
len(q_q)
length(q_q)
p
sum(p)
q
mean(q_q)
hist(q_q)
boxplot(q_q)
box(q_q)
barplot(q_q)
hist(q_q, breaks = c(1:k))
hist(q_q, breaks = c(0:k))
hist(q_q, breaks = c(0:k),xlim = range(breaks))
hist(q_q, breaks = c(0:k),xlim = range(c(0:k)))
axis(2, c(0:k), las = 1)
hist(q_q, breaks = c(0:k),xlim = range(c(0:k)))
axis(1, c(0:k), las = 1)
hist(q_q, breaks = c(0:k),xlim = range(c(0:(k+1))))
axis(1, c(0:k), las = 1)
hist(q_q, breaks = c(0:k),xlim = range(c(0:(k+1))))
axis(1, c(0:(k+1)), las = 1)
hist(q_q, breaks = c(0:(k+1)),xlim = range(c(0:(k+1))))
axis(1, c(0:(k+1)), las = 1)
p_p
p_p
stat_series <- rbind(c(0:8), p_p)
stat_series
stat_series <- rbind(c(0:8), p_p, p_p / n)
stat_series
sum(stat_series[3,])
x <- sort(q_q)
v <- seq(from = 1/n, to = 1, by = 1 / n)
plot(x,v)
library(fitdistrplus)
plot(ecdf(sort(q_q))
plot(ecdf(sort(q_q)
plot(ecdf(sort(q_q)))
lines (sort(q_q), (1:n)/n, type = 's', col="blue")
plot(ecdf(sort(seq(from = 1/n, to = 1, by = 1/n))))
plot(ecdf(sort(seq(from = 1/len(q_q), to = 1, by = 1/len(q_q)))))
plot(ecdf(sort(seq(from = 1/length(q_q), to = 1, by = 1/length(q_q)))))
length(q_q)
p_p
plot(ecdf(sort(seq(from = 1/length(p_p), to = 1, by = 1/length(p_p)))))
plot(ecdf(sort(q_q)))
lines (sort(q_q), (1:n)/n, type = 's', col="blue")
plot(ecdf(sort(seq(from = 1/length(p_p), to = 1, by = 1/length(p_p)))))
plot(ecdf(sort(seq(from = 1/length(p_p), to = 1, by = 1/length(p_p)))), add = T)
library(fitdistrplus)
plot(ecdf(sort(q_q)))
lines (sort(q_q), (1:n)/n, type = 's', col="blue")
plot(ecdf(sort(seq(from = 1/length(p_p), to = 1, by = 1/length(p_p)))), add = T)
plot(ecdf(sort(seq(from = 1/length(p_p), to = 1, by = 1/length(p_p)))), add = T)
plot(ecdf(sort(seq(from = 1/length(p_p), to = 1, by = 1/length(p_p)))))
plot(ecdf(sort(q_q)))
lines (sort(q_q), (1:n)/n, type = 's', col="blue")
plot(ecdf(sort(seq(from = 1/length(p_p), to = k, by = 1/length(p_p)))), add = T)
plot(ecdf(sort(q_q)))
lines (sort(q_q), (1:n)/n, type = 's', col="blue")
plot(ecdf(sort(seq(from = 0, to = k, by = k))), add = T)
plot(ecdf(sort(q_q)))
lines (sort(q_q), (1:n)/n, type = 's', col="blue")
plot(ecdf(sort(seq(from = 0, to = k, by = 1/k))), add = T)
1/k
1
plot(ecdf(sort(q_q)))
lines (sort(q_q), (1:n)/n, type = 's', col="blue")
plot(ecdf(sort(seq(from = 0, to = k, by = 1))), add = T)
ecdf(sort(q_q))
d <- ecdf(sort(q_q))
d
q_q_sort <- sort(q_q)
fit_bin <- fitdist(q_q_sort, "binom")
fit_bin <- fitdist(q_q_sort, "binom", discrete = T)
fit_bin <- fitdist(q_q_sort, "nbinom", discrete = T)
fit_bin
plot(fit_bin)
plot(fit_bin, ecdf(sort(q_q_sort)))
plot(ecdf(sort(q_q_sort)))
plot(fit_bin, add = T)
fit_bin$estimate
plot(fit_bin$estimate, add = T)
plot(ecdf(sort(q_q_sort)))
dev.off()
plot(ecdf(sort(q_q_sort)))
fit_bin$dots
View(fit_bin)
plot(ecdf(sort(q_q_sort)))
lines (sort(q_q_sort), (1:n)/n, type = 's', col="blue")
plot(ecdf(sort(q_q_sort)), col = "green")
lines (sort(q_q_sort), (1:n)/n, type = 's', col="blue")
q_q_sort
(1:n)/n
fit_bin$
cdfcomp(fit_bin)
stat_series
plot(cumsum(stat_series[3,]), add = T)
cumsum(stat_series[3,])
cumsum(stat_series[3,-1])
plot(ecdf(sort(q_q_sort)), col = "green")
plot(cumsum(stat_series[3,-1]), add = T)
plot(cumsum(stat_series[3,-1]))
warnings()
dev.off()
plot(cumsum(stat_series[3,-1]))
plot(cumsum(stat_series[3,-1]), type = "0")
plot(cumsum(stat_series[3,-1]), type = "l")
plot(cumsum(stat_series[3,-1]), type = "h")
plot(cumsum(stat_series[3,-1]), type = "s")
plot(ecdf(sort(q_q_sort)), col = "green", add = T)
cumsum(stat_series[3,-1])
plot(cumsum(stat_series[3,-length(stat_series)]), type = "s")
plot(ecdf(sort(q_q_sort)), col = "green", add = T)
p
q
y
p_p
q_q
stat_series
p_p[1]
p_p[1] <- sum(y < q[1])
p_p[1]
q[1]
y
plot(ecdf(sort(q_q_sort)), col = "green", add = T)
dev.off()
plot(ecdf(sort(q_q_sort)), col = "green", add = T)
plot(ecdf(sort(q_q_sort)), col = "green")
library(ggplot2)
ggplot(q_q_sort) + stat_ecdf(geom = "step")
ggplot(as.data.frame(q_q_sort)) + stat_ecdf(geom = "step")
ggplot(as.data.frame(q_q_sort), aes(q_q_sort)) + stat_ecdf(geom = "step")
ggplot(as.data.frame(q_q_sort), aes(q_q_sort)) +
stat_ecdf(geom = "step") +
geom_step()
ggplot(as.data.frame(q_q_sort), aes(q_q_sort)) +
stat_ecdf(geom = "step") +
geom_step(aes((1:n)/n))
ggplot(as.data.frame(q_q_sort), aes(q_q_sort)) +
stat_ecdf(geom = "step") +
geom_step(sort(q_q_sort), (1:n)/n)
ggplot(as.data.frame(q_q_sort), aes(q_q_sort)) +
stat_ecdf(geom = "step") +
geom_step(as.data.frame(q_q_sort), (1:n)/n)
stat_series
q_q_sort
#cdfcomp(fit_bin)
unique(q_q)
#cdfcomp(fit_bin)
unique(q_q_sort)
